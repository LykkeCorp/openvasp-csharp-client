// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtoPostalAddress.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace OpenVASP.ProtocolMessages.Messages {

  /// <summary>Holder for reflection information generated from ProtoPostalAddress.proto</summary>
  public static partial class ProtoPostalAddressReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoPostalAddress.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoPostalAddressReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhQcm90b1Bvc3RhbEFkZHJlc3MucHJvdG8SEXByb3RvYnVmX29wZW52YXNw",
            "Io8BChJQcm90b1Bvc3RhbEFkZHJlc3MSEwoLc3RyZWV0X25hbWUYASABKAkS",
            "FwoPYnVpbGRpbmdfbnVtYmVyGAIgASgFEhQKDGFkZHJlc3NfbGluZRgDIAEo",
            "CRIRCglwb3N0X2NvZGUYBCABKAkSEQoJdG93bl9uYW1lGAUgASgJEg8KB2Nv",
            "dW50cnkYBiABKAlCJaoCIk9wZW5WQVNQLlByb3RvY29sTWVzc2FnZXMuTWVz",
            "c2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::OpenVASP.ProtocolMessages.Messages.ProtoPostalAddress), global::OpenVASP.ProtocolMessages.Messages.ProtoPostalAddress.Parser, new[]{ "StreetName", "BuildingNumber", "AddressLine", "PostCode", "TownName", "Country" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProtoPostalAddress : pb::IMessage<ProtoPostalAddress> {
    private static readonly pb::MessageParser<ProtoPostalAddress> _parser = new pb::MessageParser<ProtoPostalAddress>(() => new ProtoPostalAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPostalAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::OpenVASP.ProtocolMessages.Messages.ProtoPostalAddressReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPostalAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPostalAddress(ProtoPostalAddress other) : this() {
      streetName_ = other.streetName_;
      buildingNumber_ = other.buildingNumber_;
      addressLine_ = other.addressLine_;
      postCode_ = other.postCode_;
      townName_ = other.townName_;
      country_ = other.country_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPostalAddress Clone() {
      return new ProtoPostalAddress(this);
    }

    /// <summary>Field number for the "street_name" field.</summary>
    public const int StreetNameFieldNumber = 1;
    private string streetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StreetName {
      get { return streetName_; }
      set {
        streetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "building_number" field.</summary>
    public const int BuildingNumberFieldNumber = 2;
    private int buildingNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingNumber {
      get { return buildingNumber_; }
      set {
        buildingNumber_ = value;
      }
    }

    /// <summary>Field number for the "address_line" field.</summary>
    public const int AddressLineFieldNumber = 3;
    private string addressLine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressLine {
      get { return addressLine_; }
      set {
        addressLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_code" field.</summary>
    public const int PostCodeFieldNumber = 4;
    private string postCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PostCode {
      get { return postCode_; }
      set {
        postCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "town_name" field.</summary>
    public const int TownNameFieldNumber = 5;
    private string townName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TownName {
      get { return townName_; }
      set {
        townName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 6;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPostalAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPostalAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StreetName != other.StreetName) return false;
      if (BuildingNumber != other.BuildingNumber) return false;
      if (AddressLine != other.AddressLine) return false;
      if (PostCode != other.PostCode) return false;
      if (TownName != other.TownName) return false;
      if (Country != other.Country) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StreetName.Length != 0) hash ^= StreetName.GetHashCode();
      if (BuildingNumber != 0) hash ^= BuildingNumber.GetHashCode();
      if (AddressLine.Length != 0) hash ^= AddressLine.GetHashCode();
      if (PostCode.Length != 0) hash ^= PostCode.GetHashCode();
      if (TownName.Length != 0) hash ^= TownName.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StreetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StreetName);
      }
      if (BuildingNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildingNumber);
      }
      if (AddressLine.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AddressLine);
      }
      if (PostCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PostCode);
      }
      if (TownName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TownName);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Country);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StreetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StreetName);
      }
      if (BuildingNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingNumber);
      }
      if (AddressLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressLine);
      }
      if (PostCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostCode);
      }
      if (TownName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TownName);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPostalAddress other) {
      if (other == null) {
        return;
      }
      if (other.StreetName.Length != 0) {
        StreetName = other.StreetName;
      }
      if (other.BuildingNumber != 0) {
        BuildingNumber = other.BuildingNumber;
      }
      if (other.AddressLine.Length != 0) {
        AddressLine = other.AddressLine;
      }
      if (other.PostCode.Length != 0) {
        PostCode = other.PostCode;
      }
      if (other.TownName.Length != 0) {
        TownName = other.TownName;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StreetName = input.ReadString();
            break;
          }
          case 16: {
            BuildingNumber = input.ReadInt32();
            break;
          }
          case 26: {
            AddressLine = input.ReadString();
            break;
          }
          case 34: {
            PostCode = input.ReadString();
            break;
          }
          case 42: {
            TownName = input.ReadString();
            break;
          }
          case 50: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
